<?xml version="1.0" encoding="UTF-8"?>
<!--设置log4j2的自身log级别为warn -->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置， 当设置成trace时，你会看到log4j2内部各种详细输出 -->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 -->
<configuration monitorInterval="30">
	<!-- 变量配置 -->
	<Properties>
		<Property name="log_path">${sys:user.home}/logs/management</Property>
		<Property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{%-5level}[%thread] %style{%logger{36}}{cyan} : %msg%n</Property>
	</Properties>
	<!--先定义所有的appender -->
	<appenders>
		<!--这个输出控制台的配置 -->
		<console name="Console" target="SYSTEM_OUT">
			<!--输出日志的格式 -->
			<PatternLayout pattern="${log_pattern}" />
		</console>
		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size， 则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="RollingFileInfo" fileName="${log_path}/info.log"   append="true"
					 filePattern="${log_path}/$${date:yyyy-MM-dd}/info-%d{yyyyMMdd}-%i.log.zip" immediateFlush="false">
			<Filters>
				<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
				<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY" />
			</Filters>
			<PatternLayout pattern="${log_pattern}" />
			<Policies>
				<!--CronTriggeringPolicy 和 TimeBasedTriggeringPolicy 是互斥的，roll 方式只能用其中一种，两种都配置的时候，TimeBasedTriggeringPolicy生效 -->
				<!-- <CronTriggeringPolicy schedule="* 59 23 * * ?"/> -->
				<!-- interval，表示rollover的间隔，单位是日期的最小单位，默认值是1 -->
				<TimeBasedTriggeringPolicy interval="1"/>
				<SizeBasedTriggeringPolicy size="100MB" />
			</Policies>
			<!-- 删除30天之前的日志 DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了2000 -->
			<DefaultRolloverStrategy max="2000" compressionLevel="9">
				<Delete basePath="${log_path}" maxDepth="5" >
					<IfFileName glob="*/*.log.zip" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingFile>

		<RollingFile name="RollingFileWarn" fileName="${log_path}/warn.log"
					 filePattern="${log_path}/$${date:yyyy-MM-dd}/warn-%d{yyyyMMdd}-%i.log.zip" immediateFlush="false">
			<Filters>
				<ThresholdFilter level="WARN"  onMatch="NEUTRAL" onMismatch="DENY" />
				<ThresholdFilter level="ERROR" onMatch="DENY"    onMismatch="ACCEPT"/>
			</Filters>
			<PatternLayout pattern="${log_pattern}" />
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="100 MB" />
			</Policies>
			<DefaultRolloverStrategy max="2000"
									 compressionLevel="9">
				<Delete basePath="${log_path}" maxDepth="5">
					<IfFileName glob="*/*.log.zip" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingFile>

		<RollingFile name="RollingFileError" fileName="${log_path}/error.log"
					 filePattern="${log_path}/$${date:yyyy-MM-dd}/error-%d{yyyyMMdd}-%i.log.zip" immediateFlush="false">
			<ThresholdFilter level="ERROR" />
			<PatternLayout pattern="${log_pattern}" />
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="100 MB" />
			</Policies>
			<DefaultRolloverStrategy max="2000"
									 compressionLevel="9">
				<Delete basePath="${log_path}" maxDepth="5">
					<IfFileName glob="*/*.log.zip" />
					<IfLastModified age="30d" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingFile>
	</appenders>
	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
	<loggers>
		<!--过滤掉spring和hibernate的一些无用的debug信息 -->
		<!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
<!--		<Logger name="org.springframework" level="info" additivity="false">-->
<!--			<AppenderRef ref="RollingFileInfo"/>-->
<!--		</Logger>-->

		<root level="info">
			<appender-ref ref="Console" />
<!--			<appender-ref ref="RollingFileInfo" />-->
<!--			<appender-ref ref="RollingFileWarn" />-->
<!--			<appender-ref ref="RollingFileError" />-->
		</root>
	</loggers>

</configuration>